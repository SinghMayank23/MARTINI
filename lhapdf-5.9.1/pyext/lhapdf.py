# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_lhapdf')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_lhapdf')
    _lhapdf = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lhapdf', [dirname(__file__)])
        except ImportError:
            import _lhapdf
            return _lhapdf
        if fp is not None:
            try:
                _mod = imp.load_module('_lhapdf', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _lhapdf = swig_import_helper()
    del swig_import_helper
else:
    import _lhapdf
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _lhapdf.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _lhapdf.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _lhapdf.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _lhapdf.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _lhapdf.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _lhapdf.SwigPyIterator_equal(self, x)

    def copy(self):
        return _lhapdf.SwigPyIterator_copy(self)

    def next(self):
        return _lhapdf.SwigPyIterator_next(self)

    def __next__(self):
        return _lhapdf.SwigPyIterator___next__(self)

    def previous(self):
        return _lhapdf.SwigPyIterator_previous(self)

    def advance(self, n):
        return _lhapdf.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _lhapdf.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _lhapdf.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _lhapdf.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _lhapdf.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _lhapdf.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _lhapdf.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _lhapdf.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class PDFSetInfoList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFSetInfoList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDFSetInfoList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _lhapdf.PDFSetInfoList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _lhapdf.PDFSetInfoList___nonzero__(self)

    def __bool__(self):
        return _lhapdf.PDFSetInfoList___bool__(self)

    def __len__(self):
        return _lhapdf.PDFSetInfoList___len__(self)

    def __getslice__(self, i, j):
        return _lhapdf.PDFSetInfoList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _lhapdf.PDFSetInfoList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _lhapdf.PDFSetInfoList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _lhapdf.PDFSetInfoList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _lhapdf.PDFSetInfoList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _lhapdf.PDFSetInfoList___setitem__(self, *args)

    def pop(self):
        return _lhapdf.PDFSetInfoList_pop(self)

    def append(self, x):
        return _lhapdf.PDFSetInfoList_append(self, x)

    def empty(self):
        return _lhapdf.PDFSetInfoList_empty(self)

    def size(self):
        return _lhapdf.PDFSetInfoList_size(self)

    def swap(self, v):
        return _lhapdf.PDFSetInfoList_swap(self, v)

    def begin(self):
        return _lhapdf.PDFSetInfoList_begin(self)

    def end(self):
        return _lhapdf.PDFSetInfoList_end(self)

    def rbegin(self):
        return _lhapdf.PDFSetInfoList_rbegin(self)

    def rend(self):
        return _lhapdf.PDFSetInfoList_rend(self)

    def clear(self):
        return _lhapdf.PDFSetInfoList_clear(self)

    def get_allocator(self):
        return _lhapdf.PDFSetInfoList_get_allocator(self)

    def pop_back(self):
        return _lhapdf.PDFSetInfoList_pop_back(self)

    def erase(self, *args):
        return _lhapdf.PDFSetInfoList_erase(self, *args)

    def __init__(self, *args):
        this = _lhapdf.new_PDFSetInfoList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _lhapdf.PDFSetInfoList_push_back(self, x)

    def front(self):
        return _lhapdf.PDFSetInfoList_front(self)

    def back(self):
        return _lhapdf.PDFSetInfoList_back(self)

    def assign(self, n, x):
        return _lhapdf.PDFSetInfoList_assign(self, n, x)

    def resize(self, *args):
        return _lhapdf.PDFSetInfoList_resize(self, *args)

    def insert(self, *args):
        return _lhapdf.PDFSetInfoList_insert(self, *args)

    def reserve(self, n):
        return _lhapdf.PDFSetInfoList_reserve(self, n)

    def capacity(self):
        return _lhapdf.PDFSetInfoList_capacity(self)
    __swig_destroy__ = _lhapdf.delete_PDFSetInfoList
    __del__ = lambda self: None
PDFSetInfoList_swigregister = _lhapdf.PDFSetInfoList_swigregister
PDFSetInfoList_swigregister(PDFSetInfoList)

class FloatList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _lhapdf.FloatList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _lhapdf.FloatList___nonzero__(self)

    def __bool__(self):
        return _lhapdf.FloatList___bool__(self)

    def __len__(self):
        return _lhapdf.FloatList___len__(self)

    def __getslice__(self, i, j):
        return _lhapdf.FloatList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _lhapdf.FloatList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _lhapdf.FloatList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _lhapdf.FloatList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _lhapdf.FloatList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _lhapdf.FloatList___setitem__(self, *args)

    def pop(self):
        return _lhapdf.FloatList_pop(self)

    def append(self, x):
        return _lhapdf.FloatList_append(self, x)

    def empty(self):
        return _lhapdf.FloatList_empty(self)

    def size(self):
        return _lhapdf.FloatList_size(self)

    def swap(self, v):
        return _lhapdf.FloatList_swap(self, v)

    def begin(self):
        return _lhapdf.FloatList_begin(self)

    def end(self):
        return _lhapdf.FloatList_end(self)

    def rbegin(self):
        return _lhapdf.FloatList_rbegin(self)

    def rend(self):
        return _lhapdf.FloatList_rend(self)

    def clear(self):
        return _lhapdf.FloatList_clear(self)

    def get_allocator(self):
        return _lhapdf.FloatList_get_allocator(self)

    def pop_back(self):
        return _lhapdf.FloatList_pop_back(self)

    def erase(self, *args):
        return _lhapdf.FloatList_erase(self, *args)

    def __init__(self, *args):
        this = _lhapdf.new_FloatList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _lhapdf.FloatList_push_back(self, x)

    def front(self):
        return _lhapdf.FloatList_front(self)

    def back(self):
        return _lhapdf.FloatList_back(self)

    def assign(self, n, x):
        return _lhapdf.FloatList_assign(self, n, x)

    def resize(self, *args):
        return _lhapdf.FloatList_resize(self, *args)

    def insert(self, *args):
        return _lhapdf.FloatList_insert(self, *args)

    def reserve(self, n):
        return _lhapdf.FloatList_reserve(self, n)

    def capacity(self):
        return _lhapdf.FloatList_capacity(self)
    __swig_destroy__ = _lhapdf.delete_FloatList
    __del__ = lambda self: None
FloatList_swigregister = _lhapdf.FloatList_swigregister
FloatList_swigregister(FloatList)

TBAR = _lhapdf.TBAR
BBAR = _lhapdf.BBAR
CBAR = _lhapdf.CBAR
SBAR = _lhapdf.SBAR
UBAR = _lhapdf.UBAR
DBAR = _lhapdf.DBAR
GLUON = _lhapdf.GLUON
DOWN = _lhapdf.DOWN
UP = _lhapdf.UP
STRANGE = _lhapdf.STRANGE
CHARM = _lhapdf.CHARM
BOTTOM = _lhapdf.BOTTOM
TOP = _lhapdf.TOP
PHOTON = _lhapdf.PHOTON
SILENT = _lhapdf.SILENT
LOWKEY = _lhapdf.LOWKEY
DEFAULT = _lhapdf.DEFAULT

def getVersion():
    return _lhapdf.getVersion()
getVersion = _lhapdf.getVersion

def getMaxNumSets():
    return _lhapdf.getMaxNumSets()
getMaxNumSets = _lhapdf.getMaxNumSets

def initLHAPDF():
    return _lhapdf.initLHAPDF()
initLHAPDF = _lhapdf.initLHAPDF

def setVerbosity(noiselevel):
    return _lhapdf.setVerbosity(noiselevel)
setVerbosity = _lhapdf.setVerbosity

def extrapolate(extrapolate=True):
    return _lhapdf.extrapolate(extrapolate)
extrapolate = _lhapdf.extrapolate

def setPDFPath(path):
    return _lhapdf.setPDFPath(path)
setPDFPath = _lhapdf.setPDFPath

def setParameter(parm):
    return _lhapdf.setParameter(parm)
setParameter = _lhapdf.setParameter
class PDFSetInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFSetInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDFSetInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["file"] = _lhapdf.PDFSetInfo_file_set
    __swig_getmethods__["file"] = _lhapdf.PDFSetInfo_file_get
    if _newclass:
        file = _swig_property(_lhapdf.PDFSetInfo_file_get, _lhapdf.PDFSetInfo_file_set)
    __swig_setmethods__["description"] = _lhapdf.PDFSetInfo_description_set
    __swig_getmethods__["description"] = _lhapdf.PDFSetInfo_description_get
    if _newclass:
        description = _swig_property(_lhapdf.PDFSetInfo_description_get, _lhapdf.PDFSetInfo_description_set)
    __swig_setmethods__["id"] = _lhapdf.PDFSetInfo_id_set
    __swig_getmethods__["id"] = _lhapdf.PDFSetInfo_id_get
    if _newclass:
        id = _swig_property(_lhapdf.PDFSetInfo_id_get, _lhapdf.PDFSetInfo_id_set)
    __swig_setmethods__["pdflibNType"] = _lhapdf.PDFSetInfo_pdflibNType_set
    __swig_getmethods__["pdflibNType"] = _lhapdf.PDFSetInfo_pdflibNType_get
    if _newclass:
        pdflibNType = _swig_property(_lhapdf.PDFSetInfo_pdflibNType_get, _lhapdf.PDFSetInfo_pdflibNType_set)
    __swig_setmethods__["pdflibNGroup"] = _lhapdf.PDFSetInfo_pdflibNGroup_set
    __swig_getmethods__["pdflibNGroup"] = _lhapdf.PDFSetInfo_pdflibNGroup_get
    if _newclass:
        pdflibNGroup = _swig_property(_lhapdf.PDFSetInfo_pdflibNGroup_get, _lhapdf.PDFSetInfo_pdflibNGroup_set)
    __swig_setmethods__["pdflibNSet"] = _lhapdf.PDFSetInfo_pdflibNSet_set
    __swig_getmethods__["pdflibNSet"] = _lhapdf.PDFSetInfo_pdflibNSet_get
    if _newclass:
        pdflibNSet = _swig_property(_lhapdf.PDFSetInfo_pdflibNSet_get, _lhapdf.PDFSetInfo_pdflibNSet_set)
    __swig_setmethods__["memberId"] = _lhapdf.PDFSetInfo_memberId_set
    __swig_getmethods__["memberId"] = _lhapdf.PDFSetInfo_memberId_get
    if _newclass:
        memberId = _swig_property(_lhapdf.PDFSetInfo_memberId_get, _lhapdf.PDFSetInfo_memberId_set)
    __swig_setmethods__["lowx"] = _lhapdf.PDFSetInfo_lowx_set
    __swig_getmethods__["lowx"] = _lhapdf.PDFSetInfo_lowx_get
    if _newclass:
        lowx = _swig_property(_lhapdf.PDFSetInfo_lowx_get, _lhapdf.PDFSetInfo_lowx_set)
    __swig_setmethods__["highx"] = _lhapdf.PDFSetInfo_highx_set
    __swig_getmethods__["highx"] = _lhapdf.PDFSetInfo_highx_get
    if _newclass:
        highx = _swig_property(_lhapdf.PDFSetInfo_highx_get, _lhapdf.PDFSetInfo_highx_set)
    __swig_setmethods__["lowQ2"] = _lhapdf.PDFSetInfo_lowQ2_set
    __swig_getmethods__["lowQ2"] = _lhapdf.PDFSetInfo_lowQ2_get
    if _newclass:
        lowQ2 = _swig_property(_lhapdf.PDFSetInfo_lowQ2_get, _lhapdf.PDFSetInfo_lowQ2_set)
    __swig_setmethods__["highQ2"] = _lhapdf.PDFSetInfo_highQ2_set
    __swig_getmethods__["highQ2"] = _lhapdf.PDFSetInfo_highQ2_get
    if _newclass:
        highQ2 = _swig_property(_lhapdf.PDFSetInfo_highQ2_get, _lhapdf.PDFSetInfo_highQ2_set)

    def toString(self):
        return _lhapdf.PDFSetInfo_toString(self)

    def __str__(self):
        return _lhapdf.PDFSetInfo___str__(self)

    def __init__(self):
        this = _lhapdf.new_PDFSetInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _lhapdf.delete_PDFSetInfo
    __del__ = lambda self: None
PDFSetInfo_swigregister = _lhapdf.PDFSetInfo_swigregister
PDFSetInfo_swigregister(PDFSetInfo)


def __lshift__(os, info):
    return _lhapdf.__lshift__(os, info)
__lshift__ = _lhapdf.__lshift__

def getPDFSetInfo(*args):
    return _lhapdf.getPDFSetInfo(*args)
getPDFSetInfo = _lhapdf.getPDFSetInfo

def getAllPDFSetInfo():
    return _lhapdf.getAllPDFSetInfo()
getAllPDFSetInfo = _lhapdf.getAllPDFSetInfo

def prefixPath():
    return _lhapdf.prefixPath()
prefixPath = _lhapdf.prefixPath

def pdfsetsPath():
    return _lhapdf.pdfsetsPath()
pdfsetsPath = _lhapdf.pdfsetsPath

def pdfsetsIndexPath():
    return _lhapdf.pdfsetsIndexPath()
pdfsetsIndexPath = _lhapdf.pdfsetsIndexPath

def initPDFSet(*args):
    return _lhapdf.initPDFSet(*args)
initPDFSet = _lhapdf.initPDFSet

def usePDFMember(*args):
    return _lhapdf.usePDFMember(*args)
usePDFMember = _lhapdf.usePDFMember

def getDescription(*args):
    return _lhapdf.getDescription(*args)
getDescription = _lhapdf.getDescription

def hasPhoton():
    return _lhapdf.hasPhoton()
hasPhoton = _lhapdf.hasPhoton

def numberPDF(*args):
    return _lhapdf.numberPDF(*args)
numberPDF = _lhapdf.numberPDF

def alphasPDF(*args):
    return _lhapdf.alphasPDF(*args)
alphasPDF = _lhapdf.alphasPDF

def getOrderPDF(*args):
    return _lhapdf.getOrderPDF(*args)
getOrderPDF = _lhapdf.getOrderPDF

def getOrderAlphaS(*args):
    return _lhapdf.getOrderAlphaS(*args)
getOrderAlphaS = _lhapdf.getOrderAlphaS

def getQMass(*args):
    return _lhapdf.getQMass(*args)
getQMass = _lhapdf.getQMass

def getThreshold(*args):
    return _lhapdf.getThreshold(*args)
getThreshold = _lhapdf.getThreshold

def getNf(*args):
    return _lhapdf.getNf(*args)
getNf = _lhapdf.getNf

def getLam4(*args):
    return _lhapdf.getLam4(*args)
getLam4 = _lhapdf.getLam4

def getLam5(*args):
    return _lhapdf.getLam5(*args)
getLam5 = _lhapdf.getLam5

def getXmin(*args):
    return _lhapdf.getXmin(*args)
getXmin = _lhapdf.getXmin

def getXmax(*args):
    return _lhapdf.getXmax(*args)
getXmax = _lhapdf.getXmax

def getQ2min(*args):
    return _lhapdf.getQ2min(*args)
getQ2min = _lhapdf.getQ2min

def getQ2max(*args):
    return _lhapdf.getQ2max(*args)
getQ2max = _lhapdf.getQ2max

def xfx(*args):
    return _lhapdf.xfx(*args)
xfx = _lhapdf.xfx

def xfxp(*args):
    return _lhapdf.xfxp(*args)
xfxp = _lhapdf.xfxp

def xfxa(*args):
    return _lhapdf.xfxa(*args)
xfxa = _lhapdf.xfxa

def xfxphoton(*args):
    return _lhapdf.xfxphoton(*args)
xfxphoton = _lhapdf.xfxphoton

def initPDFSetByName(*args):
    return _lhapdf.initPDFSetByName(*args)
initPDFSetByName = _lhapdf.initPDFSetByName

def initPDF(*args):
    return _lhapdf.initPDF(*args)
initPDF = _lhapdf.initPDF

def initPDFByName(*args):
    return _lhapdf.initPDFByName(*args)
initPDFByName = _lhapdf.initPDFByName
# This file is compatible with both classic and new-style classes.


